//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Yappembler.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419
// ...
#pragma warning disable CS3021

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class YappemblerLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NEWLINE=1, VARID=2, INTEGER=3, STRING=4, WS_SKIP=5, COMMENT_SKIP=6, OR=7, 
		AND=8, CREATE=9, SET=10, TO=11, USERIN=12, PRINT=13, IF=14, ELIF=15, ELSE=16, 
		END=17, REPEAT=18, UNTIL=19, OPE_MAT_PLUS=20, OPE_MAT_MINUS=21, OPE_MAT_STAR=22, 
		OPE_MAT_SLASH=23, OPE_MAT_PERCENT=24, OPE_MAT_HAT=25, OPE_BRK_OPEN=26, 
		OPE_BRK_CLOSE=27, OPE_BRK_OPEN_NEG=28, OPE_LOG_EQ=29, OPE_LOG_GE=30, OPE_LOG_LE=31, 
		OPE_LOG_NEQ=32, OPE_LOG_GT=33, OPE_LOG_LT=34;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NEWLINE", "VARID", "INTEGER", "STRING", "WS_SKIP", "COMMENT_SKIP", "WS", 
		"OR", "AND", "CREATE", "SET", "TO", "USERIN", "PRINT", "IF", "ELIF", "ELSE", 
		"END", "REPEAT", "UNTIL", "OPE_MAT_PLUS", "OPE_MAT_MINUS", "OPE_MAT_STAR", 
		"OPE_MAT_SLASH", "OPE_MAT_PERCENT", "OPE_MAT_HAT", "OPE_BRK_OPEN", "OPE_BRK_CLOSE", 
		"OPE_BRK_OPEN_NEG", "OPE_LOG_EQ", "OPE_LOG_GE", "OPE_LOG_LE", "OPE_LOG_NEQ", 
		"OPE_LOG_GT", "OPE_LOG_LT"
	};


	public YappemblerLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public YappemblerLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "'CREATE '", "'SET '", 
		"'TO '", "'USERIN'", "'PRINT '", "'IF '", "'ELIF '", "'ELSE'", "';;'", 
		"'REPEAT '", "'UNTIL '", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'('", 
		"')'", "'!('", "'=='", "'>='", "'<='", "'<>'", "'>'", "'<'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NEWLINE", "VARID", "INTEGER", "STRING", "WS_SKIP", "COMMENT_SKIP", 
		"OR", "AND", "CREATE", "SET", "TO", "USERIN", "PRINT", "IF", "ELIF", "ELSE", 
		"END", "REPEAT", "UNTIL", "OPE_MAT_PLUS", "OPE_MAT_MINUS", "OPE_MAT_STAR", 
		"OPE_MAT_SLASH", "OPE_MAT_PERCENT", "OPE_MAT_HAT", "OPE_BRK_OPEN", "OPE_BRK_CLOSE", 
		"OPE_BRK_OPEN_NEG", "OPE_LOG_EQ", "OPE_LOG_GE", "OPE_LOG_LE", "OPE_LOG_NEQ", 
		"OPE_LOG_GT", "OPE_LOG_LT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Yappembler.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static YappemblerLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,34,242,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,1,0,3,
		0,73,8,0,1,0,1,0,1,1,1,1,5,1,79,8,1,10,1,12,1,82,9,1,1,2,1,2,1,2,5,2,87,
		8,2,10,2,12,2,90,9,2,3,2,92,8,2,1,3,1,3,1,3,1,3,5,3,98,8,3,10,3,12,3,101,
		9,3,1,3,1,3,1,4,4,4,106,8,4,11,4,12,4,107,1,4,1,4,1,5,1,5,1,5,1,5,5,5,
		116,8,5,10,5,12,5,119,9,5,1,5,1,5,1,5,1,5,1,5,1,6,4,6,127,8,6,11,6,12,
		6,128,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
		1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,
		1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,
		1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,
		1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,117,0,35,1,1,
		3,2,5,3,7,4,9,5,11,6,13,0,15,7,17,8,19,9,21,10,23,11,25,12,27,13,29,14,
		31,15,33,16,35,17,37,18,39,19,41,20,43,21,45,22,47,23,49,24,51,25,53,26,
		55,27,57,28,59,29,61,30,63,31,65,32,67,33,69,34,1,0,6,1,0,97,122,4,0,48,
		57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,3,0,10,10,13,13,34,34,2,0,9,
		9,32,32,249,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
		0,0,11,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
		1,0,0,0,0,69,1,0,0,0,1,72,1,0,0,0,3,76,1,0,0,0,5,91,1,0,0,0,7,93,1,0,0,
		0,9,105,1,0,0,0,11,111,1,0,0,0,13,126,1,0,0,0,15,130,1,0,0,0,17,136,1,
		0,0,0,19,143,1,0,0,0,21,151,1,0,0,0,23,156,1,0,0,0,25,160,1,0,0,0,27,167,
		1,0,0,0,29,174,1,0,0,0,31,178,1,0,0,0,33,184,1,0,0,0,35,189,1,0,0,0,37,
		192,1,0,0,0,39,200,1,0,0,0,41,207,1,0,0,0,43,209,1,0,0,0,45,211,1,0,0,
		0,47,213,1,0,0,0,49,215,1,0,0,0,51,217,1,0,0,0,53,219,1,0,0,0,55,221,1,
		0,0,0,57,223,1,0,0,0,59,226,1,0,0,0,61,229,1,0,0,0,63,232,1,0,0,0,65,235,
		1,0,0,0,67,238,1,0,0,0,69,240,1,0,0,0,71,73,5,13,0,0,72,71,1,0,0,0,72,
		73,1,0,0,0,73,74,1,0,0,0,74,75,5,10,0,0,75,2,1,0,0,0,76,80,7,0,0,0,77,
		79,7,1,0,0,78,77,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,
		4,1,0,0,0,82,80,1,0,0,0,83,92,5,48,0,0,84,88,7,2,0,0,85,87,7,3,0,0,86,
		85,1,0,0,0,87,90,1,0,0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,92,1,0,0,0,90,
		88,1,0,0,0,91,83,1,0,0,0,91,84,1,0,0,0,92,6,1,0,0,0,93,99,5,34,0,0,94,
		98,8,4,0,0,95,96,5,92,0,0,96,98,9,0,0,0,97,94,1,0,0,0,97,95,1,0,0,0,98,
		101,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,102,1,0,0,0,101,99,1,0,0,
		0,102,103,5,34,0,0,103,8,1,0,0,0,104,106,7,5,0,0,105,104,1,0,0,0,106,107,
		1,0,0,0,107,105,1,0,0,0,107,108,1,0,0,0,108,109,1,0,0,0,109,110,6,4,0,
		0,110,10,1,0,0,0,111,112,5,47,0,0,112,113,5,42,0,0,113,117,1,0,0,0,114,
		116,9,0,0,0,115,114,1,0,0,0,116,119,1,0,0,0,117,118,1,0,0,0,117,115,1,
		0,0,0,118,120,1,0,0,0,119,117,1,0,0,0,120,121,5,42,0,0,121,122,5,47,0,
		0,122,123,1,0,0,0,123,124,6,5,0,0,124,12,1,0,0,0,125,127,7,5,0,0,126,125,
		1,0,0,0,127,128,1,0,0,0,128,126,1,0,0,0,128,129,1,0,0,0,129,14,1,0,0,0,
		130,131,3,13,6,0,131,132,5,79,0,0,132,133,5,82,0,0,133,134,1,0,0,0,134,
		135,3,13,6,0,135,16,1,0,0,0,136,137,3,13,6,0,137,138,5,65,0,0,138,139,
		5,78,0,0,139,140,5,68,0,0,140,141,1,0,0,0,141,142,3,13,6,0,142,18,1,0,
		0,0,143,144,5,67,0,0,144,145,5,82,0,0,145,146,5,69,0,0,146,147,5,65,0,
		0,147,148,5,84,0,0,148,149,5,69,0,0,149,150,5,32,0,0,150,20,1,0,0,0,151,
		152,5,83,0,0,152,153,5,69,0,0,153,154,5,84,0,0,154,155,5,32,0,0,155,22,
		1,0,0,0,156,157,5,84,0,0,157,158,5,79,0,0,158,159,5,32,0,0,159,24,1,0,
		0,0,160,161,5,85,0,0,161,162,5,83,0,0,162,163,5,69,0,0,163,164,5,82,0,
		0,164,165,5,73,0,0,165,166,5,78,0,0,166,26,1,0,0,0,167,168,5,80,0,0,168,
		169,5,82,0,0,169,170,5,73,0,0,170,171,5,78,0,0,171,172,5,84,0,0,172,173,
		5,32,0,0,173,28,1,0,0,0,174,175,5,73,0,0,175,176,5,70,0,0,176,177,5,32,
		0,0,177,30,1,0,0,0,178,179,5,69,0,0,179,180,5,76,0,0,180,181,5,73,0,0,
		181,182,5,70,0,0,182,183,5,32,0,0,183,32,1,0,0,0,184,185,5,69,0,0,185,
		186,5,76,0,0,186,187,5,83,0,0,187,188,5,69,0,0,188,34,1,0,0,0,189,190,
		5,59,0,0,190,191,5,59,0,0,191,36,1,0,0,0,192,193,5,82,0,0,193,194,5,69,
		0,0,194,195,5,80,0,0,195,196,5,69,0,0,196,197,5,65,0,0,197,198,5,84,0,
		0,198,199,5,32,0,0,199,38,1,0,0,0,200,201,5,85,0,0,201,202,5,78,0,0,202,
		203,5,84,0,0,203,204,5,73,0,0,204,205,5,76,0,0,205,206,5,32,0,0,206,40,
		1,0,0,0,207,208,5,43,0,0,208,42,1,0,0,0,209,210,5,45,0,0,210,44,1,0,0,
		0,211,212,5,42,0,0,212,46,1,0,0,0,213,214,5,47,0,0,214,48,1,0,0,0,215,
		216,5,37,0,0,216,50,1,0,0,0,217,218,5,94,0,0,218,52,1,0,0,0,219,220,5,
		40,0,0,220,54,1,0,0,0,221,222,5,41,0,0,222,56,1,0,0,0,223,224,5,33,0,0,
		224,225,5,40,0,0,225,58,1,0,0,0,226,227,5,61,0,0,227,228,5,61,0,0,228,
		60,1,0,0,0,229,230,5,62,0,0,230,231,5,61,0,0,231,62,1,0,0,0,232,233,5,
		60,0,0,233,234,5,61,0,0,234,64,1,0,0,0,235,236,5,60,0,0,236,237,5,62,0,
		0,237,66,1,0,0,0,238,239,5,62,0,0,239,68,1,0,0,0,240,241,5,60,0,0,241,
		70,1,0,0,0,10,0,72,80,88,91,97,99,107,117,128,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
