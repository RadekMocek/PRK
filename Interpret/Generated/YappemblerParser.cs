//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Yappembler.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419
// ...
#pragma warning disable CS3021

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class YappemblerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NEWLINE=1, VARID=2, INTEGER=3, STRING=4, WS_SKIP=5, COMMENT_SKIP=6, OR=7, 
		AND=8, CREATE=9, SET=10, TO=11, USERIN=12, PRINT=13, IF=14, ELIF=15, ELSE=16, 
		END=17, REPEAT=18, UNTIL=19, OPE_MAT_PLUS=20, OPE_MAT_MINUS=21, OPE_MAT_STAR=22, 
		OPE_MAT_SLASH=23, OPE_MAT_PERCENT=24, OPE_MAT_HAT=25, OPE_BRK_OPEN=26, 
		OPE_BRK_CLOSE=27, OPE_BRK_OPEN_NEG=28, OPE_LOG_EQ=29, OPE_LOG_GE=30, OPE_LOG_LE=31, 
		OPE_LOG_NEQ=32, OPE_LOG_GT=33, OPE_LOG_LT=34;
	public const int
		RULE_program = 0, RULE_lines = 1, RULE_command = 2, RULE_create_command = 3, 
		RULE_set_command = 4, RULE_userin_command = 5, RULE_print_command = 6, 
		RULE_if_command = 7, RULE_repeat_command = 8, RULE_until_command = 9, 
		RULE_interpol = 10, RULE_expr = 11, RULE_expr_mul = 12, RULE_expr_pow = 13, 
		RULE_expr_item = 14, RULE_logc = 15, RULE_logc_and = 16, RULE_logc_item = 17, 
		RULE_comp = 18, RULE_comp_oper = 19;
	public static readonly string[] ruleNames = {
		"program", "lines", "command", "create_command", "set_command", "userin_command", 
		"print_command", "if_command", "repeat_command", "until_command", "interpol", 
		"expr", "expr_mul", "expr_pow", "expr_item", "logc", "logc_and", "logc_item", 
		"comp", "comp_oper"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "'CREATE '", "'SET '", 
		"'TO '", "'USERIN'", "'PRINT '", "'IF '", "'ELIF '", "'ELSE'", "';;'", 
		"'REPEAT '", "'UNTIL '", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'('", 
		"')'", "'!('", "'=='", "'>='", "'<='", "'<>'", "'>'", "'<'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NEWLINE", "VARID", "INTEGER", "STRING", "WS_SKIP", "COMMENT_SKIP", 
		"OR", "AND", "CREATE", "SET", "TO", "USERIN", "PRINT", "IF", "ELIF", "ELSE", 
		"END", "REPEAT", "UNTIL", "OPE_MAT_PLUS", "OPE_MAT_MINUS", "OPE_MAT_STAR", 
		"OPE_MAT_SLASH", "OPE_MAT_PERCENT", "OPE_MAT_HAT", "OPE_BRK_OPEN", "OPE_BRK_CLOSE", 
		"OPE_BRK_OPEN_NEG", "OPE_LOG_EQ", "OPE_LOG_GE", "OPE_LOG_LE", "OPE_LOG_NEQ", 
		"OPE_LOG_GT", "OPE_LOG_LT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Yappembler.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static YappemblerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public YappemblerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public YappemblerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LinesContext lines() {
			return GetRuleContext<LinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(YappemblerParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYappemblerVisitor<TResult> typedVisitor = visitor as IYappemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			lines();
			State = 41;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(YappemblerParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(YappemblerParser.NEWLINE, i);
		}
		public LinesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lines; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYappemblerVisitor<TResult> typedVisitor = visitor as IYappemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLines(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinesContext lines() {
		LinesContext _localctx = new LinesContext(Context, State);
		EnterRule(_localctx, 2, RULE_lines);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 812546L) != 0)) {
				{
				State = 47;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CREATE:
				case SET:
				case PRINT:
				case IF:
				case REPEAT:
				case UNTIL:
					{
					State = 43;
					command();
					State = 44;
					Match(NEWLINE);
					}
					break;
				case NEWLINE:
					{
					State = 46;
					Match(NEWLINE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Create_commandContext create_command() {
			return GetRuleContext<Create_commandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_commandContext set_command() {
			return GetRuleContext<Set_commandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Userin_commandContext userin_command() {
			return GetRuleContext<Userin_commandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Print_commandContext print_command() {
			return GetRuleContext<Print_commandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_commandContext if_command() {
			return GetRuleContext<If_commandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_commandContext repeat_command() {
			return GetRuleContext<Repeat_commandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Until_commandContext until_command() {
			return GetRuleContext<Until_commandContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYappemblerVisitor<TResult> typedVisitor = visitor as IYappemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 4, RULE_command);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52;
				create_command();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 53;
				set_command();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 54;
				userin_command();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 55;
				print_command();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 56;
				if_command();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 57;
				repeat_command();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 58;
				until_command();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_commandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(YappemblerParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARID() { return GetTokens(YappemblerParser.VARID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID(int i) {
			return GetToken(YappemblerParser.VARID, i);
		}
		public Create_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYappemblerVisitor<TResult> typedVisitor = visitor as IYappemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_commandContext create_command() {
		Create_commandContext _localctx = new Create_commandContext(Context, State);
		EnterRule(_localctx, 6, RULE_create_command);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(CREATE);
			State = 65;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 62;
					Match(VARID);
					}
					} 
				}
				State = 67;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 68;
			Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_commandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YappemblerParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(YappemblerParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(YappemblerParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Set_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYappemblerVisitor<TResult> typedVisitor = visitor as IYappemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_commandContext set_command() {
		Set_commandContext _localctx = new Set_commandContext(Context, State);
		EnterRule(_localctx, 8, RULE_set_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(SET);
			State = 71;
			Match(VARID);
			State = 72;
			Match(TO);
			State = 73;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Userin_commandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(YappemblerParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(YappemblerParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USERIN() { return GetToken(YappemblerParser.USERIN, 0); }
		public Userin_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userin_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYappemblerVisitor<TResult> typedVisitor = visitor as IYappemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserin_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Userin_commandContext userin_command() {
		Userin_commandContext _localctx = new Userin_commandContext(Context, State);
		EnterRule(_localctx, 10, RULE_userin_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(SET);
			State = 76;
			Match(VARID);
			State = 77;
			Match(USERIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_commandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(YappemblerParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterpolContext interpol() {
			return GetRuleContext<InterpolContext>(0);
		}
		public Print_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYappemblerVisitor<TResult> typedVisitor = visitor as IYappemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Print_commandContext print_command() {
		Print_commandContext _localctx = new Print_commandContext(Context, State);
		EnterRule(_localctx, 12, RULE_print_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(PRINT);
			State = 80;
			interpol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_commandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(YappemblerParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogcContext[] logc() {
			return GetRuleContexts<LogcContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogcContext logc(int i) {
			return GetRuleContext<LogcContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(YappemblerParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(YappemblerParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinesContext[] lines() {
			return GetRuleContexts<LinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinesContext lines(int i) {
			return GetRuleContext<LinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(YappemblerParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELIF() { return GetTokens(YappemblerParser.ELIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF(int i) {
			return GetToken(YappemblerParser.ELIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(YappemblerParser.ELSE, 0); }
		public If_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYappemblerVisitor<TResult> typedVisitor = visitor as IYappemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_commandContext if_command() {
		If_commandContext _localctx = new If_commandContext(Context, State);
		EnterRule(_localctx, 14, RULE_if_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(IF);
			State = 83;
			logc(0);
			State = 84;
			Match(NEWLINE);
			State = 85;
			lines();
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELIF) {
				{
				{
				State = 86;
				Match(ELIF);
				State = 87;
				logc(0);
				State = 88;
				Match(NEWLINE);
				State = 89;
				lines();
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 96;
				Match(ELSE);
				State = 97;
				Match(NEWLINE);
				State = 98;
				lines();
				}
			}

			State = 101;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_commandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(YappemblerParser.REPEAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(YappemblerParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinesContext lines() {
			return GetRuleContext<LinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(YappemblerParser.END, 0); }
		public Repeat_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYappemblerVisitor<TResult> typedVisitor = visitor as IYappemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_commandContext repeat_command() {
		Repeat_commandContext _localctx = new Repeat_commandContext(Context, State);
		EnterRule(_localctx, 16, RULE_repeat_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(REPEAT);
			State = 104;
			expr(0);
			State = 105;
			Match(NEWLINE);
			State = 106;
			lines();
			State = 107;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Until_commandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(YappemblerParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogcContext logc() {
			return GetRuleContext<LogcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(YappemblerParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinesContext lines() {
			return GetRuleContext<LinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(YappemblerParser.END, 0); }
		public Until_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_until_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYappemblerVisitor<TResult> typedVisitor = visitor as IYappemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntil_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Until_commandContext until_command() {
		Until_commandContext _localctx = new Until_commandContext(Context, State);
		EnterRule(_localctx, 18, RULE_until_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(UNTIL);
			State = 110;
			logc(0);
			State = 111;
			Match(NEWLINE);
			State = 112;
			lines();
			State = 113;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterpolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(YappemblerParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(YappemblerParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public InterpolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYappemblerVisitor<TResult> typedVisitor = visitor as IYappemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterpolContext interpol() {
		InterpolContext _localctx = new InterpolContext(Context, State);
		EnterRule(_localctx, 20, RULE_interpol);
		int _la;
		try {
			int _alt;
			State = 152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115;
				Match(STRING);
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 69206028L) != 0)) {
					{
					{
					State = 116;
					expr(0);
					State = 117;
					Match(STRING);
					}
					}
					State = 123;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124;
				Match(STRING);
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 125;
						expr(0);
						State = 126;
						Match(STRING);
						}
						} 
					}
					State = 132;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				State = 133;
				expr(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 134;
				expr(0);
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==STRING) {
					{
					{
					State = 135;
					Match(STRING);
					State = 136;
					expr(0);
					}
					}
					State = 141;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 142;
				expr(0);
				State = 147;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 143;
						Match(STRING);
						State = 144;
						expr(0);
						}
						} 
					}
					State = 149;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				}
				State = 150;
				Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_mulContext expr_mul() {
			return GetRuleContext<Expr_mulContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPE_MAT_PLUS() { return GetToken(YappemblerParser.OPE_MAT_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPE_MAT_MINUS() { return GetToken(YappemblerParser.OPE_MAT_MINUS, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYappemblerVisitor<TResult> typedVisitor = visitor as IYappemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 155;
			expr_mul(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 162;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 157;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 158;
					_la = TokenStream.LA(1);
					if ( !(_la==OPE_MAT_PLUS || _la==OPE_MAT_MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 159;
					expr_mul(0);
					}
					} 
				}
				State = 164;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expr_mulContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_powContext expr_pow() {
			return GetRuleContext<Expr_powContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_mulContext expr_mul() {
			return GetRuleContext<Expr_mulContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPE_MAT_STAR() { return GetToken(YappemblerParser.OPE_MAT_STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPE_MAT_SLASH() { return GetToken(YappemblerParser.OPE_MAT_SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPE_MAT_PERCENT() { return GetToken(YappemblerParser.OPE_MAT_PERCENT, 0); }
		public Expr_mulContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_mul; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYappemblerVisitor<TResult> typedVisitor = visitor as IYappemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_mul(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_mulContext expr_mul() {
		return expr_mul(0);
	}

	private Expr_mulContext expr_mul(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expr_mulContext _localctx = new Expr_mulContext(Context, _parentState);
		Expr_mulContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expr_mul, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 166;
			expr_pow();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 173;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expr_mulContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expr_mul);
					State = 168;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 169;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 29360128L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 170;
					expr_pow();
					}
					} 
				}
				State = 175;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expr_powContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_itemContext expr_item() {
			return GetRuleContext<Expr_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPE_MAT_HAT() { return GetToken(YappemblerParser.OPE_MAT_HAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_powContext expr_pow() {
			return GetRuleContext<Expr_powContext>(0);
		}
		public Expr_powContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_pow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYappemblerVisitor<TResult> typedVisitor = visitor as IYappemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_pow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_powContext expr_pow() {
		Expr_powContext _localctx = new Expr_powContext(Context, State);
		EnterRule(_localctx, 26, RULE_expr_pow);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176;
				expr_item();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177;
				expr_item();
				State = 178;
				Match(OPE_MAT_HAT);
				State = 179;
				expr_pow();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPE_BRK_OPEN() { return GetToken(YappemblerParser.OPE_BRK_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPE_BRK_CLOSE() { return GetToken(YappemblerParser.OPE_BRK_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(YappemblerParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARID() { return GetToken(YappemblerParser.VARID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPE_MAT_MINUS() { return GetToken(YappemblerParser.OPE_MAT_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_itemContext expr_item() {
			return GetRuleContext<Expr_itemContext>(0);
		}
		public Expr_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYappemblerVisitor<TResult> typedVisitor = visitor as IYappemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_itemContext expr_item() {
		Expr_itemContext _localctx = new Expr_itemContext(Context, State);
		EnterRule(_localctx, 28, RULE_expr_item);
		try {
			State = 191;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPE_BRK_OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183;
				Match(OPE_BRK_OPEN);
				State = 184;
				expr(0);
				State = 185;
				Match(OPE_BRK_CLOSE);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187;
				Match(INTEGER);
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 188;
				Match(VARID);
				}
				break;
			case OPE_MAT_MINUS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 189;
				Match(OPE_MAT_MINUS);
				State = 190;
				expr_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logc_andContext logc_and() {
			return GetRuleContext<Logc_andContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogcContext logc() {
			return GetRuleContext<LogcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(YappemblerParser.OR, 0); }
		public LogcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYappemblerVisitor<TResult> typedVisitor = visitor as IYappemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogcContext logc() {
		return logc(0);
	}

	private LogcContext logc(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogcContext _localctx = new LogcContext(Context, _parentState);
		LogcContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_logc, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 194;
			logc_and(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 201;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogcContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logc);
					State = 196;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 197;
					Match(OR);
					State = 198;
					logc_and(0);
					}
					} 
				}
				State = 203;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logc_andContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logc_itemContext logc_item() {
			return GetRuleContext<Logc_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logc_andContext logc_and() {
			return GetRuleContext<Logc_andContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(YappemblerParser.AND, 0); }
		public Logc_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logc_and; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYappemblerVisitor<TResult> typedVisitor = visitor as IYappemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogc_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logc_andContext logc_and() {
		return logc_and(0);
	}

	private Logc_andContext logc_and(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logc_andContext _localctx = new Logc_andContext(Context, _parentState);
		Logc_andContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_logc_and, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 205;
			logc_item();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 212;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logc_andContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logc_and);
					State = 207;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 208;
					Match(AND);
					State = 209;
					logc_item();
					}
					} 
				}
				State = 214;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logc_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompContext comp() {
			return GetRuleContext<CompContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPE_BRK_OPEN() { return GetToken(YappemblerParser.OPE_BRK_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogcContext logc() {
			return GetRuleContext<LogcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPE_BRK_CLOSE() { return GetToken(YappemblerParser.OPE_BRK_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPE_BRK_OPEN_NEG() { return GetToken(YappemblerParser.OPE_BRK_OPEN_NEG, 0); }
		public Logc_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logc_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYappemblerVisitor<TResult> typedVisitor = visitor as IYappemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogc_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logc_itemContext logc_item() {
		Logc_itemContext _localctx = new Logc_itemContext(Context, State);
		EnterRule(_localctx, 34, RULE_logc_item);
		try {
			State = 224;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 215;
				comp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 216;
				Match(OPE_BRK_OPEN);
				State = 217;
				logc(0);
				State = 218;
				Match(OPE_BRK_CLOSE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 220;
				Match(OPE_BRK_OPEN_NEG);
				State = 221;
				logc(0);
				State = 222;
				Match(OPE_BRK_CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comp_operContext comp_oper() {
			return GetRuleContext<Comp_operContext>(0);
		}
		public CompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYappemblerVisitor<TResult> typedVisitor = visitor as IYappemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompContext comp() {
		CompContext _localctx = new CompContext(Context, State);
		EnterRule(_localctx, 36, RULE_comp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			expr(0);
			State = 227;
			comp_oper();
			State = 228;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_operContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPE_LOG_EQ() { return GetToken(YappemblerParser.OPE_LOG_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPE_LOG_GE() { return GetToken(YappemblerParser.OPE_LOG_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPE_LOG_LE() { return GetToken(YappemblerParser.OPE_LOG_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPE_LOG_NEQ() { return GetToken(YappemblerParser.OPE_LOG_NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPE_LOG_GT() { return GetToken(YappemblerParser.OPE_LOG_GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPE_LOG_LT() { return GetToken(YappemblerParser.OPE_LOG_LT, 0); }
		public Comp_operContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_oper; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYappemblerVisitor<TResult> typedVisitor = visitor as IYappemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComp_oper(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comp_operContext comp_oper() {
		Comp_operContext _localctx = new Comp_operContext(Context, State);
		EnterRule(_localctx, 38, RULE_comp_oper);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 33822867456L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return expr_sempred((ExprContext)_localctx, predIndex);
		case 12: return expr_mul_sempred((Expr_mulContext)_localctx, predIndex);
		case 15: return logc_sempred((LogcContext)_localctx, predIndex);
		case 16: return logc_and_sempred((Logc_andContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expr_mul_sempred(Expr_mulContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logc_sempred(LogcContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logc_and_sempred(Logc_andContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,34,233,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,0,1,1,1,1,
		1,1,1,1,5,1,48,8,1,10,1,12,1,51,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,60,
		8,2,1,3,1,3,5,3,64,8,3,10,3,12,3,67,9,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,
		5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,92,8,
		7,10,7,12,7,95,9,7,1,7,1,7,1,7,3,7,100,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
		1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,5,10,120,8,10,10,10,12,
		10,123,9,10,1,10,1,10,1,10,1,10,5,10,129,8,10,10,10,12,10,132,9,10,1,10,
		1,10,1,10,1,10,5,10,138,8,10,10,10,12,10,141,9,10,1,10,1,10,1,10,5,10,
		146,8,10,10,10,12,10,149,9,10,1,10,1,10,3,10,153,8,10,1,11,1,11,1,11,1,
		11,1,11,1,11,5,11,161,8,11,10,11,12,11,164,9,11,1,12,1,12,1,12,1,12,1,
		12,1,12,5,12,172,8,12,10,12,12,12,175,9,12,1,13,1,13,1,13,1,13,1,13,3,
		13,182,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,192,8,14,1,15,
		1,15,1,15,1,15,1,15,1,15,5,15,200,8,15,10,15,12,15,203,9,15,1,16,1,16,
		1,16,1,16,1,16,1,16,5,16,211,8,16,10,16,12,16,214,9,16,1,17,1,17,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,3,17,225,8,17,1,18,1,18,1,18,1,18,1,19,1,
		19,1,19,0,4,22,24,30,32,20,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
		32,34,36,38,0,3,1,0,20,21,1,0,22,24,1,0,29,34,240,0,40,1,0,0,0,2,49,1,
		0,0,0,4,59,1,0,0,0,6,61,1,0,0,0,8,70,1,0,0,0,10,75,1,0,0,0,12,79,1,0,0,
		0,14,82,1,0,0,0,16,103,1,0,0,0,18,109,1,0,0,0,20,152,1,0,0,0,22,154,1,
		0,0,0,24,165,1,0,0,0,26,181,1,0,0,0,28,191,1,0,0,0,30,193,1,0,0,0,32,204,
		1,0,0,0,34,224,1,0,0,0,36,226,1,0,0,0,38,230,1,0,0,0,40,41,3,2,1,0,41,
		42,5,0,0,1,42,1,1,0,0,0,43,44,3,4,2,0,44,45,5,1,0,0,45,48,1,0,0,0,46,48,
		5,1,0,0,47,43,1,0,0,0,47,46,1,0,0,0,48,51,1,0,0,0,49,47,1,0,0,0,49,50,
		1,0,0,0,50,3,1,0,0,0,51,49,1,0,0,0,52,60,3,6,3,0,53,60,3,8,4,0,54,60,3,
		10,5,0,55,60,3,12,6,0,56,60,3,14,7,0,57,60,3,16,8,0,58,60,3,18,9,0,59,
		52,1,0,0,0,59,53,1,0,0,0,59,54,1,0,0,0,59,55,1,0,0,0,59,56,1,0,0,0,59,
		57,1,0,0,0,59,58,1,0,0,0,60,5,1,0,0,0,61,65,5,9,0,0,62,64,5,2,0,0,63,62,
		1,0,0,0,64,67,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,68,1,0,0,0,67,65,
		1,0,0,0,68,69,5,2,0,0,69,7,1,0,0,0,70,71,5,10,0,0,71,72,5,2,0,0,72,73,
		5,11,0,0,73,74,3,22,11,0,74,9,1,0,0,0,75,76,5,10,0,0,76,77,5,2,0,0,77,
		78,5,12,0,0,78,11,1,0,0,0,79,80,5,13,0,0,80,81,3,20,10,0,81,13,1,0,0,0,
		82,83,5,14,0,0,83,84,3,30,15,0,84,85,5,1,0,0,85,93,3,2,1,0,86,87,5,15,
		0,0,87,88,3,30,15,0,88,89,5,1,0,0,89,90,3,2,1,0,90,92,1,0,0,0,91,86,1,
		0,0,0,92,95,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,99,1,0,0,0,95,93,1,
		0,0,0,96,97,5,16,0,0,97,98,5,1,0,0,98,100,3,2,1,0,99,96,1,0,0,0,99,100,
		1,0,0,0,100,101,1,0,0,0,101,102,5,17,0,0,102,15,1,0,0,0,103,104,5,18,0,
		0,104,105,3,22,11,0,105,106,5,1,0,0,106,107,3,2,1,0,107,108,5,17,0,0,108,
		17,1,0,0,0,109,110,5,19,0,0,110,111,3,30,15,0,111,112,5,1,0,0,112,113,
		3,2,1,0,113,114,5,17,0,0,114,19,1,0,0,0,115,121,5,4,0,0,116,117,3,22,11,
		0,117,118,5,4,0,0,118,120,1,0,0,0,119,116,1,0,0,0,120,123,1,0,0,0,121,
		119,1,0,0,0,121,122,1,0,0,0,122,153,1,0,0,0,123,121,1,0,0,0,124,130,5,
		4,0,0,125,126,3,22,11,0,126,127,5,4,0,0,127,129,1,0,0,0,128,125,1,0,0,
		0,129,132,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,133,1,0,0,0,132,
		130,1,0,0,0,133,153,3,22,11,0,134,139,3,22,11,0,135,136,5,4,0,0,136,138,
		3,22,11,0,137,135,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,0,
		0,0,140,153,1,0,0,0,141,139,1,0,0,0,142,147,3,22,11,0,143,144,5,4,0,0,
		144,146,3,22,11,0,145,143,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,147,
		148,1,0,0,0,148,150,1,0,0,0,149,147,1,0,0,0,150,151,5,4,0,0,151,153,1,
		0,0,0,152,115,1,0,0,0,152,124,1,0,0,0,152,134,1,0,0,0,152,142,1,0,0,0,
		153,21,1,0,0,0,154,155,6,11,-1,0,155,156,3,24,12,0,156,162,1,0,0,0,157,
		158,10,1,0,0,158,159,7,0,0,0,159,161,3,24,12,0,160,157,1,0,0,0,161,164,
		1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,23,1,0,0,0,164,162,1,0,0,0,
		165,166,6,12,-1,0,166,167,3,26,13,0,167,173,1,0,0,0,168,169,10,1,0,0,169,
		170,7,1,0,0,170,172,3,26,13,0,171,168,1,0,0,0,172,175,1,0,0,0,173,171,
		1,0,0,0,173,174,1,0,0,0,174,25,1,0,0,0,175,173,1,0,0,0,176,182,3,28,14,
		0,177,178,3,28,14,0,178,179,5,25,0,0,179,180,3,26,13,0,180,182,1,0,0,0,
		181,176,1,0,0,0,181,177,1,0,0,0,182,27,1,0,0,0,183,184,5,26,0,0,184,185,
		3,22,11,0,185,186,5,27,0,0,186,192,1,0,0,0,187,192,5,3,0,0,188,192,5,2,
		0,0,189,190,5,21,0,0,190,192,3,28,14,0,191,183,1,0,0,0,191,187,1,0,0,0,
		191,188,1,0,0,0,191,189,1,0,0,0,192,29,1,0,0,0,193,194,6,15,-1,0,194,195,
		3,32,16,0,195,201,1,0,0,0,196,197,10,1,0,0,197,198,5,7,0,0,198,200,3,32,
		16,0,199,196,1,0,0,0,200,203,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,
		31,1,0,0,0,203,201,1,0,0,0,204,205,6,16,-1,0,205,206,3,34,17,0,206,212,
		1,0,0,0,207,208,10,1,0,0,208,209,5,8,0,0,209,211,3,34,17,0,210,207,1,0,
		0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,33,1,0,0,0,214,
		212,1,0,0,0,215,225,3,36,18,0,216,217,5,26,0,0,217,218,3,30,15,0,218,219,
		5,27,0,0,219,225,1,0,0,0,220,221,5,28,0,0,221,222,3,30,15,0,222,223,5,
		27,0,0,223,225,1,0,0,0,224,215,1,0,0,0,224,216,1,0,0,0,224,220,1,0,0,0,
		225,35,1,0,0,0,226,227,3,22,11,0,227,228,3,38,19,0,228,229,3,22,11,0,229,
		37,1,0,0,0,230,231,7,2,0,0,231,39,1,0,0,0,18,47,49,59,65,93,99,121,130,
		139,147,152,162,173,181,191,201,212,224
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
